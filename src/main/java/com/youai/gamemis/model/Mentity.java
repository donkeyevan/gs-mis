package com.youai.gamemis.model;

// Generated 2011-4-2 19:12:15 by Hibernate Tools 3.3.0.GA

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;


/**
 * Mentity generated by hbm2java
 */
@Entity
@Table(name = "mentity")
public class Mentity implements java.io.Serializable, Cloneable {
	
	private String id;
	private String entityName;
	private String entityClass;
	private String comment;
	private Integer isSysconfig;
	private String catalog;
	private String extendLink;
	private Integer parentNavId;
	@Transient
	private Integer shard;
	
	@Column(name = "catalog", length = 255)
	public String getCatalog() {
		return catalog;
	}
	public void setCatalog(String catalog) {
		this.catalog = catalog;
	}
	
	@Column(name = "is_sysconfig")
	public Integer getIsSysconfig() {
		return isSysconfig;
	}
	public void setIsSysconfig(Integer isSysconfig) {
		this.isSysconfig = isSysconfig;
	}


	@Transient
	private Mfield idField;
	
	
	@Transient
	public Mfield getIdField() {
		return this.idField;
	}
	public void setIdField(Mfield idField) {
		this.idField = idField;
	}
	
	
	@Transient
    private List<Mfield> fields;
	@Transient
	private ExtendLinkType extendLinkType;
	@Transient
	public ExtendLinkType getExtendLinkType() {
		return extendLinkType;
	}
	public void setExtendLinkType(ExtendLinkType extendLinkType) {
		this.extendLinkType = extendLinkType;
	}
	public Object clone() {  
        Mentity o = null;  
        try {
            
            o = (Mentity) super.clone();  
            List<Mfield> fields = new ArrayList<Mfield>();
            for( Mfield mfield : o.getFields()){
                fields.add( (Mfield)mfield.clone() );
            }
            
            o.setExtendLinkType( o.getExtendLinkType() == null ? null : (ExtendLinkType)o.getExtendLinkType().clone() );
            o.setFields( fields );
            Mfield idField = (Mfield)o.getIdField().clone();
            o.setIdField( idField );
        } catch (CloneNotSupportedException e) {  
            e.printStackTrace();  
        }  
        return o;  
    }
	@Transient
    public List<Mfield> getFields() {
        return this.fields;
    }
	@Transient
    public void setFields(List<Mfield> fields) {
        this.fields = fields;
    }
	public Mentity() {
	}

	public Mentity(String id) {
		this.id = id;
	}

	public Mentity(String id, String entityName, String entityClass,
			String comment) {
		this.id = id;
		this.entityName = entityName;
		this.entityClass = entityClass;
		this.comment = comment;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, length = 32)
	@GenericGenerator(name="idGenerator", strategy="uuid") 
	@GeneratedValue(generator="idGenerator")
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Column(name = "entity_name", length = 128)
	public String getEntityName() {
		return this.entityName;
	}

	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}

	@Column(name = "entity_class", length = 1024)
	public String getEntityClass() {
		return this.entityClass;
	}

	public void setEntityClass(String entityClass) {
		this.entityClass = entityClass;
	}

	@Column(name = "comment", length = 1024)
	public String getComment() {
		return this.comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}
	
	@Column(name="extend_link")
	public String getExtendLink() {
		return extendLink;
	}
	public void setExtendLink(String extendLink) {
		this.extendLink = extendLink;
	}
	
	
	@Column(name = "parent_nav_id")
	public Integer getParentNavId() {
		return parentNavId;
	}
	public void setParentNavId(Integer parentNavId) {
		this.parentNavId = parentNavId;
	}
	
	
	@Transient
	public Integer getShard() {
		return shard;
	}
	public void setShard(Integer shard) {
		this.shard = shard;
	}
	@Transient
	public List<Mfield> getAllfields(){
		ArrayList<Mfield> allfields = new ArrayList<Mfield>( );
		for( Mfield mfield : this.fields ){
			allfields.add( mfield );
		}
		allfields.add( this.getIdField() );
		return allfields;
	}

}
